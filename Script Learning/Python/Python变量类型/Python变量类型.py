#!/usr/bin/python
#coding=utf-8

#Python 变量类型
#变量存储在内存中的值。这就意味着在创建变量时会在内存中开辟一个空间。
#基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。

#变量赋值
#Python中的变量不需要声明，变量的赋值操作既是变量声明和定义的过程。
#每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。
#每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。
#等号（=）用来给变量赋值。
#等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。

miles= 1000.0 #浮点型
name = "John" #字符串

print miles
print name

#多个变量赋值
#Python允许你同时为多个变量赋值。例如：
a = b = c = 1
print a, b, c
a, b, c = 1, 2.0, "John"
print a, b, c

#标准数据类型
#在内存中存储的数据可以有多种类型。
#Python有五个标准的数据类型：
#Numbers（数字）
#String（字符串）
#List（列表）
#Tuple（元组）
#Dictionary（字典）

#Python数字
#数字数据类型用于存储数值。

#Python数据类型转换
#有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。
#以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。
#函数	描述
#int(x [,base])
#将x转换为一个整数

#long(x [,base] )
#将x转换为一个长整数

#float(x)
#将x转换到一个浮点数

#complex(real [,imag])
#创建一个复数

#str(x)
#将对象 x 转换为字符串

#repr(x)
#将对象 x 转换为表达式字符串

#eval(str)
#用来计算在字符串中的有效Python表达式,并返回一个对象

#tuple(s)
#将序列 s 转换为一个元组

#list(s)
#将序列 s 转换为一个列表

#set(s)
#转换为可变集合

#dict(d)
#创建一个字典。d 必须是一个序列 (key,value)元组。

#frozenset(s)
#转换为不可变集合

#chr(x)
#将一个整数转换为一个字符

#unichr(x)
#将一个整数转换为Unicode字符

#ord(x)
#将一个字符转换为它的整数值

#hex(x)
#将一个整数转换为一个十六进制字符串

#oct(x)
#将一个整数转换为一个八进制字符串

